package com.atc.common.util.cache;/** * Created by Vic.Feng on 15/12/2015. */import com.atc.common.util.config.ApplicationConfiguration;import com.atc.common.util.config.CoreConfiguration;import com.atc.common.util.exception.ATCException;import org.infinispan.Cache;import org.infinispan.manager.DefaultCacheManager;import java.io.IOException;import java.util.Iterator;public class CacheFactory implements IRefreshable {    public static final String INFINISPAN_CACHE_CONFIG = "infinispan.xml";    public static final String DEFAULT_INFINISPAN_CACHE_CONFIG_KEY = "default_path_to_infinispan_cache_config";    public static final String ENTITY_CACHE_NAMESPACE = "entity-cache";    public static final String OBJECT_CACHE_NAMESPACE = "object-cache";    public static final String PROP_CACHE_NAMESPACE = "prop-cache";    private static DefaultCacheManager instance = null;    /**     * Get a cache with the given name/region name     *     * @param cacheNameSpace The name of the region     * @return The cache instance matching that region     */    public static <K, V> ATCCache<K, V> getCache(String cacheNameSpace) throws ATCException {        try {            return new ATCCache<K, V>(CacheFactory.getCacheManagerInstance().<K, V>getCache(cacheNameSpace));        } catch (Exception ex) {            throw new ATCException("<Exception getting cache namespace handle><" + cacheNameSpace + ">", ex);        }    }    /**     * Returns a singleton instance of this class     *     * @return DefaultCacheManager     * @throws Exception     */    static DefaultCacheManager getCacheManagerInstance()            throws Exception {        if (instance == null) {            synchronized (DefaultCacheManager.class) {                if (instance == null) {                    try {                        String configFilePath = getConfigFileLocation(INFINISPAN_CACHE_CONFIG);                        if (org.apache.commons.lang3.StringUtils.isEmpty(configFilePath)) {                            String defaultPathToConfig = ApplicationConfiguration.getValue(DEFAULT_INFINISPAN_CACHE_CONFIG_KEY);                            instance = org.apache.commons.lang3.StringUtils.isEmpty(defaultPathToConfig)                                    ? new DefaultCacheManager() : new DefaultCacheManager(defaultPathToConfig);                        } else {                            instance = new DefaultCacheManager(configFilePath);                        }                    } catch (IOException ioEx) {                        //return default cache                        instance = new DefaultCacheManager();                    }                }            }        }        return instance;    }    /**     * Clear all cache entries     */    public void clearAll() throws ATCException {        try {            Iterator _iterator = CacheFactory.getCacheManagerInstance().getCacheNames().iterator();            while (_iterator.hasNext()) {                Cache<Object, Object> cache = CacheFactory.getCache((String) _iterator.next());                cache.clear();            }        } catch (Exception ex) {            throw new ATCException("<Exception clearing all cache entries>", ex);        }    }    /**     * Refresh the properties     *     * @throws IRefreshableException If there is an error refreshing the properties for the cache     */    public void refresh() throws IRefreshableException {        //Refresh cache properties...TODO    }    private static String getConfigFileLocation(String configFileName) {        String deploymentEnv = System.getProperty("atc.deployment.env");        String appName = CoreConfiguration.getValue(CoreConfiguration.APPLICATION_NAME);        String configParentFolder = ApplicationConfiguration.getConfigParentFolderName();        if (!org.apache.commons.lang3.StringUtils.isEmpty(appName) && !org.apache.commons.lang3.StringUtils.isEmpty(deploymentEnv)) {            return "/" + configParentFolder + "/" + appName + "/" + deploymentEnv + "/" + configFileName;        }        return null;    }}