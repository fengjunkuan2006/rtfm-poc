package com.atc.common.util.cache;/** * Created by Vic.Feng on 15/12/2015. */import org.infinispan.AdvancedCache;import org.infinispan.Cache;import org.infinispan.configuration.cache.Configuration;import org.infinispan.lifecycle.ComponentStatus;import org.infinispan.manager.EmbeddedCacheManager;import org.infinispan.notifications.KeyFilter;import org.infinispan.util.concurrent.NotifyingFuture;import java.util.Collection;import java.util.Map;import java.util.Set;import java.util.concurrent.TimeUnit;/** * <p> * A <code>ATCCache</code>} implementation that delegates to * org.infinispan.Cache instance supplied at construction time * </p> */public class ATCCache<K, V> implements Cache<K, V> {    private final Cache<K, V> nativeCache;    public ATCCache(final Cache<K, V> nativeCache) {        this.nativeCache = nativeCache;    }    public Cache<K, V> getNativeCache() {        return this.nativeCache;    }    @Override    public boolean containsKey(final Object key) {        return this.nativeCache.containsKey(key);    }    @Override    public V get(final Object key) {        return this.nativeCache.get(key);    }    @Override    public V put(final K key, final V value) {        return this.nativeCache.put(key, value);    }    @Override    public V putIfAbsent(final K key, final V value) {        return this.nativeCache.putIfAbsent(key, value);    }    @Override    public V remove(final Object key) {        return this.nativeCache.remove(key);    }    @Override    public boolean remove(final Object key, final Object value) {        return this.nativeCache.remove(key, value);    }    @Override    public boolean replace(final K key, final V oldValue, final V newValue) {        return this.nativeCache.replace(key, oldValue, newValue);    }    @Override    public V replace(final K key, final V value) {        return this.nativeCache.replace(key, value);    }    @Override    public void clear() {        this.nativeCache.clear();    }    public void putForExternalRead(K k, V v) {        this.nativeCache.putForExternalRead(k, v);    }    public void evict(K k) {        this.nativeCache.evict(k);    }    public Configuration getConfiguration() {        return this.nativeCache.getCacheConfiguration();    }    public Configuration getCacheConfiguration() {        return this.nativeCache.getCacheConfiguration();    }    public boolean startBatch() {        return this.nativeCache.startBatch();    }    public void endBatch(boolean b) {        this.nativeCache.endBatch(b);    }    @Override    public String getName() {        return this.nativeCache.getName();    }    public String getVersion() {        return this.nativeCache.getVersion();    }    @Override    public EmbeddedCacheManager getCacheManager() {        return this.nativeCache.getCacheManager();    }    public V put(K k, V v, long l, TimeUnit timeUnit) {        return this.nativeCache.put(k, v, l, timeUnit);    }    public V put(K k, V v, long l, TimeUnit timeUnit, long l1,                 TimeUnit timeUnit1) {        return this.nativeCache.put(k, v, l, timeUnit, l1, timeUnit1);    }    public V putIfAbsent(K k, V v, long l, TimeUnit timeUnit) {        return this.nativeCache.putIfAbsent(k, v, l, timeUnit);    }    public V putIfAbsent(K k, V v, long l, TimeUnit timeUnit, long l1,                         TimeUnit timeUnit1) {        return null;    }    public void putAll(Map<? extends K, ? extends V> map, long l,                       TimeUnit timeUnit) {        this.nativeCache.putAll(map, l, timeUnit);    }    public void putAll(Map<? extends K, ? extends V> map, long l,                       TimeUnit timeUnit, long l1, TimeUnit timeUnit1) {        this.nativeCache.putAll(map, l, timeUnit, l1, timeUnit1);    }    public V replace(K k, V v, long l, TimeUnit timeUnit) {        return this.nativeCache.replace(k, v, l, timeUnit);    }    public boolean replace(K k, V v, V v1, long l, TimeUnit timeUnit) {        return false;    }    public V replace(K k, V v, long l, TimeUnit timeUnit, long l1,                     TimeUnit timeUnit1) {        return null;    }    public boolean replace(K k, V v, V v1, long l, TimeUnit timeUnit, long l1,                           TimeUnit timeUnit1) {        return false;    }    public NotifyingFuture<V> putAsync(K k, V v) {        return null;    }    public NotifyingFuture<V> putAsync(K k, V v, long l, TimeUnit timeUnit) {        return null;    }    public NotifyingFuture<V> putAsync(K k, V v, long l, TimeUnit timeUnit,                                       long l1, TimeUnit timeUnit1) {        return null;    }    public NotifyingFuture<Void> putAllAsync(Map<? extends K, ? extends V> map) {        return null;    }    public NotifyingFuture<Void> putAllAsync(Map<? extends K, ? extends V> map,                                             long l, TimeUnit timeUnit) {        return null;    }    public NotifyingFuture<Void> putAllAsync(Map<? extends K, ? extends V> map,                                             long l, TimeUnit timeUnit,                                             long l1, TimeUnit timeUnit1) {        return null;    }    public NotifyingFuture<Void> clearAsync() {        return null;    }    public NotifyingFuture<V> putIfAbsentAsync(K k, V v) {        return null;    }    public NotifyingFuture<V> putIfAbsentAsync(K k, V v, long l,                                               TimeUnit timeUnit) {        return null;    }    public NotifyingFuture<V> putIfAbsentAsync(K k, V v, long l,                                               TimeUnit timeUnit, long l1,                                               TimeUnit timeUnit1) {        return null;    }    public NotifyingFuture<V> removeAsync(Object object) {        return null;    }    public NotifyingFuture<Boolean> removeAsync(Object object,                                                Object object1) {        return null;    }    public NotifyingFuture<V> replaceAsync(K k, V v) {        return null;    }    public NotifyingFuture<V> replaceAsync(K k, V v, long l,                                           TimeUnit timeUnit) {        return null;    }    public NotifyingFuture<V> replaceAsync(K k, V v, long l, TimeUnit timeUnit,                                           long l1, TimeUnit timeUnit1) {        return null;    }    public NotifyingFuture<Boolean> replaceAsync(K k, V v, V v1) {        return null;    }    public NotifyingFuture<Boolean> replaceAsync(K k, V v, V v1, long l,                                                 TimeUnit timeUnit) {        return null;    }    public NotifyingFuture<Boolean> replaceAsync(K k, V v, V v1, long l,                                                 TimeUnit timeUnit, long l1,                                                 TimeUnit timeUnit1) {        return null;    }    public NotifyingFuture<V> getAsync(K k) {        return null;    }    public AdvancedCache<K, V> getAdvancedCache() {        return this.nativeCache.getAdvancedCache();    }    //public void compact() {    //    this.nativeCache.compact();    //}    public ComponentStatus getStatus() {        return this.nativeCache.getStatus();    }    public Set<K> keySet() {        return this.nativeCache.keySet();    }    public Collection<V> values() {        return this.nativeCache.values();    }    public Set<Entry<K, V>> entrySet() {        return this.nativeCache.entrySet();    }    public int size() {        return this.nativeCache.size();    }    public boolean isEmpty() {        return this.nativeCache.isEmpty();    }    public boolean containsValue(Object value) {        return this.nativeCache.containsValue(value);    }    public void putAll(Map<? extends K, ? extends V> m) {        this.nativeCache.putAll(m);    }    public void start() {        this.nativeCache.start();    }    public void stop() {        this.nativeCache.stop();    }    public void addListener(Object object) {        this.nativeCache.addListener(object);    }    public void removeListener(Object object) {        this.nativeCache.removeListener(object);    }    public Set<Object> getListeners() {        return this.nativeCache.getListeners();    }    public Set<String> getCacheNames() {        return this.nativeCache.getCacheManager().getCacheNames();    }    public void clearCache() {        this.nativeCache.clear();    }    public void addListener(Object var1, KeyFilter var2) { this.nativeCache.addListener(var1, var2); }    /**     * @see Object#toString()     */    @Override    public String toString() {        return "InfinispanCache [nativeCache = " + this.nativeCache + "]";    }}