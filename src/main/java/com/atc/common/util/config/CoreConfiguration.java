package com.atc.common.util.config;/** * Created by Vic.Feng on 15/12/2015. */import com.atc.common.constant.SystemConstants;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Properties;import java.util.ResourceBundle;/** * The CoreConfiguration class provides access to core configuration settings * that do not change per the environment in the form of properties * loaded from a property file. * * @author Ketan Dave * @created 12/5/2011 * @copyright Copyright (c) 2010 American Tower Corporation, All Rights Reserved. */public class CoreConfiguration {    public CoreConfiguration() {        super();    }    /**     * Application configuration constants     */    private static final Logger logger = LoggerFactory.getLogger(CoreConfiguration.class);    /**     * Application configuration value constants     */    // TODO: move these deployment configuration constants to the system configuration class?    //    public final static String APPLICATION_NAME = "atc.application.name";    // private fields    //    private static ResourceBundle bundle = null;    private static ResourceBundle getBundle() {        if (bundle == null) {            logger.info("Selecting core configuration from config package");            bundle = ResourceBundle.getBundle("sysconfig");        }        return bundle;    }    /**     * Retrieve the value stored for the specified setting.     *     * @param name The name of the configuration setting to retrieve     * @return The value of the configuration setting     */    public static String getValue(String name) {        if (name == null) {            return null;        }        // First look in the resource bundle for the setting        //        try {            String filePath = System.getProperty(SystemConstants.JVM_CONFIG_PATH);            if (filePath == null || filePath.isEmpty()) {                filePath = SystemConstants.FILE_PROPERTIES_SYSCONFIG;            }            Properties p = new Properties();            p.load(CoreConfiguration.class.getClassLoader().getResourceAsStream(filePath));            return p.getProperty(name);        } catch (Exception e) {            // Only java.util.MissingResourceException and java.lang.ClassCastException            // can be thrown by getString            e.printStackTrace(System.out);        }        return null;    }}